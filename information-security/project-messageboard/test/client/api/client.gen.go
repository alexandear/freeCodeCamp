// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// CreateReplyBody defines model for CreateReplyBody.
type CreateReplyBody struct {
	DeletePassword string `json:"delete_password"`
	Text           string `json:"text"`
	ThreadId       string `json:"thread_id"`
}

// CreateThreadBody defines model for CreateThreadBody.
type CreateThreadBody struct {
	DeletePassword string `json:"delete_password"`
	Text           string `json:"text"`
}

// DeleteReplyBody defines model for DeleteReplyBody.
type DeleteReplyBody struct {
	DeletePassword string `json:"delete_password"`
	ReplyId        string `json:"reply_id"`
	ThreadId       string `json:"thread_id"`
}

// DeleteThreadBody defines model for DeleteThreadBody.
type DeleteThreadBody struct {
	DeletePassword string `json:"delete_password"`
	ThreadId       string `json:"thread_id"`
}

// Reply defines model for Reply.
type Reply struct {
	Id        string    `json:"_id"`
	CreatedOn time.Time `json:"created_on"`
	Text      string    `json:"text"`
}

// ReportReplyBody defines model for ReportReplyBody.
type ReportReplyBody struct {
	ReplyId  string `json:"reply_id"`
	ThreadId string `json:"thread_id"`
}

// ReportThreadBody defines model for ReportThreadBody.
type ReportThreadBody struct {
	ThreadId string `json:"thread_id"`
}

// Thread defines model for Thread.
type Thread struct {
	Id         string    `json:"_id"`
	BumpedOn   time.Time `json:"bumped_on"`
	CreatedOn  time.Time `json:"created_on"`
	Replies    []Reply   `json:"replies"`
	Replycount int       `json:"replycount"`
	Text       string    `json:"text"`
}

// Board defines model for Board.
type Board = string

// GetRepliesParams defines parameters for GetReplies.
type GetRepliesParams struct {
	ThreadId string `form:"thread_id" json:"thread_id"`
}

// DeleteReplyJSONRequestBody defines body for DeleteReply for application/json ContentType.
type DeleteReplyJSONRequestBody = DeleteReplyBody

// CreateReplyJSONRequestBody defines body for CreateReply for application/json ContentType.
type CreateReplyJSONRequestBody = CreateReplyBody

// CreateReplyFormdataRequestBody defines body for CreateReply for application/x-www-form-urlencoded ContentType.
type CreateReplyFormdataRequestBody = CreateReplyBody

// ReportReplyJSONRequestBody defines body for ReportReply for application/json ContentType.
type ReportReplyJSONRequestBody = ReportReplyBody

// DeleteThreadJSONRequestBody defines body for DeleteThread for application/json ContentType.
type DeleteThreadJSONRequestBody = DeleteThreadBody

// CreateThreadJSONRequestBody defines body for CreateThread for application/json ContentType.
type CreateThreadJSONRequestBody = CreateThreadBody

// CreateThreadFormdataRequestBody defines body for CreateThread for application/x-www-form-urlencoded ContentType.
type CreateThreadFormdataRequestBody = CreateThreadBody

// ReportThreadJSONRequestBody defines body for ReportThread for application/json ContentType.
type ReportThreadJSONRequestBody = ReportThreadBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// DeleteReply request with any body
	DeleteReplyWithBody(ctx context.Context, board Board, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteReply(ctx context.Context, board Board, body DeleteReplyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReplies request
	GetReplies(ctx context.Context, board Board, params *GetRepliesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateReply request with any body
	CreateReplyWithBody(ctx context.Context, board Board, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateReply(ctx context.Context, board Board, body CreateReplyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateReplyWithFormdataBody(ctx context.Context, board Board, body CreateReplyFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReportReply request with any body
	ReportReplyWithBody(ctx context.Context, board Board, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReportReply(ctx context.Context, board Board, body ReportReplyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteThread request with any body
	DeleteThreadWithBody(ctx context.Context, board Board, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteThread(ctx context.Context, board Board, body DeleteThreadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetThreads request
	GetThreads(ctx context.Context, board Board, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateThread request with any body
	CreateThreadWithBody(ctx context.Context, board Board, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateThread(ctx context.Context, board Board, body CreateThreadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateThreadWithFormdataBody(ctx context.Context, board Board, body CreateThreadFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReportThread request with any body
	ReportThreadWithBody(ctx context.Context, board Board, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReportThread(ctx context.Context, board Board, body ReportThreadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) DeleteReplyWithBody(ctx context.Context, board Board, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteReplyRequestWithBody(c.Server, board, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteReply(ctx context.Context, board Board, body DeleteReplyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteReplyRequest(c.Server, board, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReplies(ctx context.Context, board Board, params *GetRepliesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepliesRequest(c.Server, board, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateReplyWithBody(ctx context.Context, board Board, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateReplyRequestWithBody(c.Server, board, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateReply(ctx context.Context, board Board, body CreateReplyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateReplyRequest(c.Server, board, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateReplyWithFormdataBody(ctx context.Context, board Board, body CreateReplyFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateReplyRequestWithFormdataBody(c.Server, board, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReportReplyWithBody(ctx context.Context, board Board, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReportReplyRequestWithBody(c.Server, board, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReportReply(ctx context.Context, board Board, body ReportReplyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReportReplyRequest(c.Server, board, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteThreadWithBody(ctx context.Context, board Board, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteThreadRequestWithBody(c.Server, board, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteThread(ctx context.Context, board Board, body DeleteThreadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteThreadRequest(c.Server, board, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetThreads(ctx context.Context, board Board, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetThreadsRequest(c.Server, board)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateThreadWithBody(ctx context.Context, board Board, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateThreadRequestWithBody(c.Server, board, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateThread(ctx context.Context, board Board, body CreateThreadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateThreadRequest(c.Server, board, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateThreadWithFormdataBody(ctx context.Context, board Board, body CreateThreadFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateThreadRequestWithFormdataBody(c.Server, board, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReportThreadWithBody(ctx context.Context, board Board, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReportThreadRequestWithBody(c.Server, board, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReportThread(ctx context.Context, board Board, body ReportThreadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReportThreadRequest(c.Server, board, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewDeleteReplyRequest calls the generic DeleteReply builder with application/json body
func NewDeleteReplyRequest(server string, board Board, body DeleteReplyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteReplyRequestWithBody(server, board, "application/json", bodyReader)
}

// NewDeleteReplyRequestWithBody generates requests for DeleteReply with any type of body
func NewDeleteReplyRequestWithBody(server string, board Board, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "board", runtime.ParamLocationPath, board)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/replies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRepliesRequest generates requests for GetReplies
func NewGetRepliesRequest(server string, board Board, params *GetRepliesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "board", runtime.ParamLocationPath, board)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/replies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "thread_id", runtime.ParamLocationQuery, params.ThreadId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateReplyRequest calls the generic CreateReply builder with application/json body
func NewCreateReplyRequest(server string, board Board, body CreateReplyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateReplyRequestWithBody(server, board, "application/json", bodyReader)
}

// NewCreateReplyRequestWithFormdataBody calls the generic CreateReply builder with application/x-www-form-urlencoded body
func NewCreateReplyRequestWithFormdataBody(server string, board Board, body CreateReplyFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewCreateReplyRequestWithBody(server, board, "application/x-www-form-urlencoded", bodyReader)
}

// NewCreateReplyRequestWithBody generates requests for CreateReply with any type of body
func NewCreateReplyRequestWithBody(server string, board Board, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "board", runtime.ParamLocationPath, board)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/replies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReportReplyRequest calls the generic ReportReply builder with application/json body
func NewReportReplyRequest(server string, board Board, body ReportReplyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReportReplyRequestWithBody(server, board, "application/json", bodyReader)
}

// NewReportReplyRequestWithBody generates requests for ReportReply with any type of body
func NewReportReplyRequestWithBody(server string, board Board, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "board", runtime.ParamLocationPath, board)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/replies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteThreadRequest calls the generic DeleteThread builder with application/json body
func NewDeleteThreadRequest(server string, board Board, body DeleteThreadJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteThreadRequestWithBody(server, board, "application/json", bodyReader)
}

// NewDeleteThreadRequestWithBody generates requests for DeleteThread with any type of body
func NewDeleteThreadRequestWithBody(server string, board Board, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "board", runtime.ParamLocationPath, board)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/threads/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetThreadsRequest generates requests for GetThreads
func NewGetThreadsRequest(server string, board Board) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "board", runtime.ParamLocationPath, board)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/threads/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateThreadRequest calls the generic CreateThread builder with application/json body
func NewCreateThreadRequest(server string, board Board, body CreateThreadJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateThreadRequestWithBody(server, board, "application/json", bodyReader)
}

// NewCreateThreadRequestWithFormdataBody calls the generic CreateThread builder with application/x-www-form-urlencoded body
func NewCreateThreadRequestWithFormdataBody(server string, board Board, body CreateThreadFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewCreateThreadRequestWithBody(server, board, "application/x-www-form-urlencoded", bodyReader)
}

// NewCreateThreadRequestWithBody generates requests for CreateThread with any type of body
func NewCreateThreadRequestWithBody(server string, board Board, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "board", runtime.ParamLocationPath, board)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/threads/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReportThreadRequest calls the generic ReportThread builder with application/json body
func NewReportThreadRequest(server string, board Board, body ReportThreadJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReportThreadRequestWithBody(server, board, "application/json", bodyReader)
}

// NewReportThreadRequestWithBody generates requests for ReportThread with any type of body
func NewReportThreadRequestWithBody(server string, board Board, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "board", runtime.ParamLocationPath, board)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/threads/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// DeleteReply request with any body
	DeleteReplyWithBodyWithResponse(ctx context.Context, board Board, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteReplyResponse, error)

	DeleteReplyWithResponse(ctx context.Context, board Board, body DeleteReplyJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteReplyResponse, error)

	// GetReplies request
	GetRepliesWithResponse(ctx context.Context, board Board, params *GetRepliesParams, reqEditors ...RequestEditorFn) (*GetRepliesResponse, error)

	// CreateReply request with any body
	CreateReplyWithBodyWithResponse(ctx context.Context, board Board, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateReplyResponse, error)

	CreateReplyWithResponse(ctx context.Context, board Board, body CreateReplyJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateReplyResponse, error)

	CreateReplyWithFormdataBodyWithResponse(ctx context.Context, board Board, body CreateReplyFormdataRequestBody, reqEditors ...RequestEditorFn) (*CreateReplyResponse, error)

	// ReportReply request with any body
	ReportReplyWithBodyWithResponse(ctx context.Context, board Board, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReportReplyResponse, error)

	ReportReplyWithResponse(ctx context.Context, board Board, body ReportReplyJSONRequestBody, reqEditors ...RequestEditorFn) (*ReportReplyResponse, error)

	// DeleteThread request with any body
	DeleteThreadWithBodyWithResponse(ctx context.Context, board Board, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteThreadResponse, error)

	DeleteThreadWithResponse(ctx context.Context, board Board, body DeleteThreadJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteThreadResponse, error)

	// GetThreads request
	GetThreadsWithResponse(ctx context.Context, board Board, reqEditors ...RequestEditorFn) (*GetThreadsResponse, error)

	// CreateThread request with any body
	CreateThreadWithBodyWithResponse(ctx context.Context, board Board, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateThreadResponse, error)

	CreateThreadWithResponse(ctx context.Context, board Board, body CreateThreadJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateThreadResponse, error)

	CreateThreadWithFormdataBodyWithResponse(ctx context.Context, board Board, body CreateThreadFormdataRequestBody, reqEditors ...RequestEditorFn) (*CreateThreadResponse, error)

	// ReportThread request with any body
	ReportThreadWithBodyWithResponse(ctx context.Context, board Board, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReportThreadResponse, error)

	ReportThreadWithResponse(ctx context.Context, board Board, body ReportThreadJSONRequestBody, reqEditors ...RequestEditorFn) (*ReportThreadResponse, error)
}

type DeleteReplyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteReplyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteReplyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepliesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Thread
}

// Status returns HTTPResponse.Status
func (r GetRepliesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepliesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateReplyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateReplyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateReplyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReportReplyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReportReplyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReportReplyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteThreadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteThreadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteThreadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetThreadsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Thread
}

// Status returns HTTPResponse.Status
func (r GetThreadsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetThreadsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateThreadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateThreadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateThreadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReportThreadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReportThreadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReportThreadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// DeleteReplyWithBodyWithResponse request with arbitrary body returning *DeleteReplyResponse
func (c *ClientWithResponses) DeleteReplyWithBodyWithResponse(ctx context.Context, board Board, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteReplyResponse, error) {
	rsp, err := c.DeleteReplyWithBody(ctx, board, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteReplyResponse(rsp)
}

func (c *ClientWithResponses) DeleteReplyWithResponse(ctx context.Context, board Board, body DeleteReplyJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteReplyResponse, error) {
	rsp, err := c.DeleteReply(ctx, board, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteReplyResponse(rsp)
}

// GetRepliesWithResponse request returning *GetRepliesResponse
func (c *ClientWithResponses) GetRepliesWithResponse(ctx context.Context, board Board, params *GetRepliesParams, reqEditors ...RequestEditorFn) (*GetRepliesResponse, error) {
	rsp, err := c.GetReplies(ctx, board, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepliesResponse(rsp)
}

// CreateReplyWithBodyWithResponse request with arbitrary body returning *CreateReplyResponse
func (c *ClientWithResponses) CreateReplyWithBodyWithResponse(ctx context.Context, board Board, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateReplyResponse, error) {
	rsp, err := c.CreateReplyWithBody(ctx, board, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateReplyResponse(rsp)
}

func (c *ClientWithResponses) CreateReplyWithResponse(ctx context.Context, board Board, body CreateReplyJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateReplyResponse, error) {
	rsp, err := c.CreateReply(ctx, board, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateReplyResponse(rsp)
}

func (c *ClientWithResponses) CreateReplyWithFormdataBodyWithResponse(ctx context.Context, board Board, body CreateReplyFormdataRequestBody, reqEditors ...RequestEditorFn) (*CreateReplyResponse, error) {
	rsp, err := c.CreateReplyWithFormdataBody(ctx, board, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateReplyResponse(rsp)
}

// ReportReplyWithBodyWithResponse request with arbitrary body returning *ReportReplyResponse
func (c *ClientWithResponses) ReportReplyWithBodyWithResponse(ctx context.Context, board Board, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReportReplyResponse, error) {
	rsp, err := c.ReportReplyWithBody(ctx, board, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReportReplyResponse(rsp)
}

func (c *ClientWithResponses) ReportReplyWithResponse(ctx context.Context, board Board, body ReportReplyJSONRequestBody, reqEditors ...RequestEditorFn) (*ReportReplyResponse, error) {
	rsp, err := c.ReportReply(ctx, board, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReportReplyResponse(rsp)
}

// DeleteThreadWithBodyWithResponse request with arbitrary body returning *DeleteThreadResponse
func (c *ClientWithResponses) DeleteThreadWithBodyWithResponse(ctx context.Context, board Board, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteThreadResponse, error) {
	rsp, err := c.DeleteThreadWithBody(ctx, board, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteThreadResponse(rsp)
}

func (c *ClientWithResponses) DeleteThreadWithResponse(ctx context.Context, board Board, body DeleteThreadJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteThreadResponse, error) {
	rsp, err := c.DeleteThread(ctx, board, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteThreadResponse(rsp)
}

// GetThreadsWithResponse request returning *GetThreadsResponse
func (c *ClientWithResponses) GetThreadsWithResponse(ctx context.Context, board Board, reqEditors ...RequestEditorFn) (*GetThreadsResponse, error) {
	rsp, err := c.GetThreads(ctx, board, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetThreadsResponse(rsp)
}

// CreateThreadWithBodyWithResponse request with arbitrary body returning *CreateThreadResponse
func (c *ClientWithResponses) CreateThreadWithBodyWithResponse(ctx context.Context, board Board, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateThreadResponse, error) {
	rsp, err := c.CreateThreadWithBody(ctx, board, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateThreadResponse(rsp)
}

func (c *ClientWithResponses) CreateThreadWithResponse(ctx context.Context, board Board, body CreateThreadJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateThreadResponse, error) {
	rsp, err := c.CreateThread(ctx, board, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateThreadResponse(rsp)
}

func (c *ClientWithResponses) CreateThreadWithFormdataBodyWithResponse(ctx context.Context, board Board, body CreateThreadFormdataRequestBody, reqEditors ...RequestEditorFn) (*CreateThreadResponse, error) {
	rsp, err := c.CreateThreadWithFormdataBody(ctx, board, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateThreadResponse(rsp)
}

// ReportThreadWithBodyWithResponse request with arbitrary body returning *ReportThreadResponse
func (c *ClientWithResponses) ReportThreadWithBodyWithResponse(ctx context.Context, board Board, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReportThreadResponse, error) {
	rsp, err := c.ReportThreadWithBody(ctx, board, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReportThreadResponse(rsp)
}

func (c *ClientWithResponses) ReportThreadWithResponse(ctx context.Context, board Board, body ReportThreadJSONRequestBody, reqEditors ...RequestEditorFn) (*ReportThreadResponse, error) {
	rsp, err := c.ReportThread(ctx, board, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReportThreadResponse(rsp)
}

// ParseDeleteReplyResponse parses an HTTP response from a DeleteReplyWithResponse call
func ParseDeleteReplyResponse(rsp *http.Response) (*DeleteReplyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteReplyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRepliesResponse parses an HTTP response from a GetRepliesWithResponse call
func ParseGetRepliesResponse(rsp *http.Response) (*GetRepliesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepliesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Thread
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateReplyResponse parses an HTTP response from a CreateReplyWithResponse call
func ParseCreateReplyResponse(rsp *http.Response) (*CreateReplyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateReplyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseReportReplyResponse parses an HTTP response from a ReportReplyWithResponse call
func ParseReportReplyResponse(rsp *http.Response) (*ReportReplyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReportReplyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteThreadResponse parses an HTTP response from a DeleteThreadWithResponse call
func ParseDeleteThreadResponse(rsp *http.Response) (*DeleteThreadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteThreadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetThreadsResponse parses an HTTP response from a GetThreadsWithResponse call
func ParseGetThreadsResponse(rsp *http.Response) (*GetThreadsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetThreadsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Thread
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateThreadResponse parses an HTTP response from a CreateThreadWithResponse call
func ParseCreateThreadResponse(rsp *http.Response) (*CreateThreadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateThreadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseReportThreadResponse parses an HTTP response from a ReportThreadWithResponse call
func ParseReportThreadResponse(rsp *http.Response) (*ReportThreadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReportThreadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
